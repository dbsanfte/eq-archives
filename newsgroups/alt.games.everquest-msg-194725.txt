From -3898321374080604496
X-Google-Language: ENGLISH,ASCII-7-bit
X-Google-Thread: fb739,99150ddd3abad77d
X-Google-Attributes: gidfb739,public
X-Google-ArrivalTime: 2003-04-28 08:14:50 PST
Path: archiver1.google.com!news1.google.com!newsfeed.stanford.edu!news-spur1.maxwell.syr.edu!news.maxwell.syr.edu!fu-berlin.de!uni-berlin.de!cpe-206-168-217-77.rockynet.COM!not-for-mail
From: Graeme Faelban <RichardRapier@netscape.net>
Newsgroups: alt.games.everquest
Subject: Re: OT: Assembly Code
Date: 28 Apr 2003 15:14:48 GMT
Lines: 194
Message-ID: <Xns936B5E107E558richardrapiernetscap@130.133.1.4>
References: <3h%qa.43164$ey1.4012483@newsread1.prod.itd.earthlink.net>
NNTP-Posting-Host: cpe-206-168-217-77.rockynet.com (206.168.217.77)
X-Trace: fu-berlin.de 1051542888 11232371 206.168.217.77 (16 [111521])
User-Agent: Xnews/5.04.25
Xref: archiver1.google.com alt.games.everquest:279043

"Chris" <Dranai@REMOVEearthlink.net> wrote in
news:3h%qa.43164$ey1.4012483@newsread1.prod.itd.earthlink.net: 

> I know this is very off topic, but I know that very computer literate
> people look here often and there aren't any english speaking
> newsgroups for assembler code that I could find, so I was hoping
> someone would have some kindness and tell me what exactly isn't
> working on this assembly code. 
> 
> (Btw, if it makes a difference, I didn't just stop by for the help, I
> used to post under 'Snaredmyself' and a few others as the times
> change.. again, I know i'm gonna be flamed, but it may be worth it if
> someone solves this 
>    ).
> 
> The code is a reverse polish notation evaluation. (basically goes
> through postfix mathamatical expression and solves it).  The problems
> are: 
> 
> The code compiles and works, all except  the last time through the
> loop (L1: in RPN), and the div is giving an integer overflow which I
> don't know how to handle.  I don't really have to handle it, just make
> it so it doesn't happen.. (not error checked, just fixed).  It only
> goes through the first expression, not the second (not an error, I
> haven't set it to go through the second yet.
> 
> Well, thanks to anyone who looks!
> 
> Code:
> 
> .386
> .model flat, stdcall
> .stack 100h
> DumpMem PROTO
> DumpRegs PROTO
> ExitProcess PROTO, dwExitCode:dword
> 
> ;-------------------------------------------------------------------
> 
> .data
> Variables  DWORD  17,   ;A
>        12,   ;B
>        4,   ;C
>        10,   ;D
>        5   ;E
> 
> Expression  BYTE  "AB-C*DE-/" ;Expression evaluation. =4.
> Expression2  BYTE  "AB-CD*+E/" ;Expression evaluation. =9.
> temp   DWORD  ?
> 
> ;-------------------------------------------------------------------
> 
> .code
> 
> main proc
> 
>  call  DumpRegs
> 
>  mov   esi,  OFFSET Expression
>  mov   edx,  OFFSET Variables
>  mov   ecx,  LENGTHOF Variables
> 
>  call  RPN
> 
>  call  DumpRegs
> 
>  invoke  exitprocess, 0   ;Graceful Exit
> main endp
> 
> ;-------------------------------------------------------------------
> 
> RPN Proc
> ; Returns in EAX
> ; Receives Evaluation String Offset in ESI.
> ; Receives Lengthof Evaluation String in ECX.
> ; Receives Variable Offset in EDX.
> ; Calculates Reverse Polish Notation on passed string.
> 
> L1:
> 
>  movzx   ebx,  BYTE PTR [esi]
>  inc   esi
> 
>  call  isOp
> 
>  cmp eax, 0
>   je PushVar ; If variable, jump to PushVar.
>   jmp DoOp ; Else (if operator), jump to DoOp.
> 
> Lloop:
>  loop L1
> 
>  jmp Done  ; Done evaluating.
> 
> PushVar:
>  push [edx]
>  add   edx,  4   ;Inc var ptr by 4 (dword).
>  jmp Lloop
> 
> DoOp:
> 
>  cmp   ebx,  '+'
>   je  ADDITION
>  cmp   ebx,  '-'
>   je  SUBTRACTION
>  cmp   ebx,  '*'
>   je  MULTIPLICATION
>  cmp   ebx,  '/'
>   je  DIVISION
> 
> ADDITION:
> 
>  pop temp
>  pop eax
>  add   eax,  temp
>  push eax
>  jmp Lloop
> 
> SUBTRACTION:
> 
>  pop temp
>  pop eax
>  sub   eax,  temp
>  push eax
>  jmp Lloop
> 
> MULTIPLICATION:
> 
>  pop temp
>  pop eax
>  push edx
>  imul temp
>  pop edx
>  push eax
>  jmp Lloop
> 
> DIVISION:
> 
>  pop temp
>  pop eax
>  push edx
>  div temp
>  pop edx
>  push eax
>  jmp Lloop
> 
> Done:
> 
>  pop   eax
>  call  DumpRegs
> 
>  ret
> RPN endp
> 
> ;-------------------------------------------------------------------
> 
> isOp Proc
> ; Returns in EAX
> ; Receives Character to analyze in EBX.
> ; returns 0 if variable, 1 if register.
> 
>  cmp ebx, 41h
>   jb L1
>   jmp L2
> L1:
>  mov   eax,  1
>  jmp L3
> 
> L2:
>  mov   eax,  0
>  jmp L3
> 
> L3:
>  ret
> 
> isOp endp
> ;-------------------------------------------------------------------
> 
> end main
> 
> 
> 

Try comp.lang.asm.x86

-- 
Baron Graeme Faelban, Barbarian Oracle of 61 seasons, Erollisi Marr <The 
Appointed>
Tainniel Fleabane, Halfling Warrior of 30 seasons, Erollisi Marr <The 
Appointed>
Ganwein, Wood Elf Ranger of 15 seasons, Erollisi Marr <The Appointed>
Giluven, Wood Elf Druid of 23 seasons, Erollisi Marr
Graeniel, High Elf Enchanter of 23 seasons, Erollisi Marr <The Appointed>
Emgraeme, Gnome Wizard of 11 seasons, Test


