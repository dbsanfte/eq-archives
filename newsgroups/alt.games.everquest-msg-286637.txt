From 8695489949421058326
X-Google-Thread: fb739,514c4bf3ba0de665
X-Google-Attributes: gidfb739,public,usenet
X-Google-Language: ENGLISH,ASCII-7-bit
Path: g2news2.google.com!news1.google.com!newsfeed2.dallas1.level3.net!news.level3.com!panix!not-for-mail
From: wrat@panix.com (the wharf rat)
Newsgroups: alt.games.everquest
Subject: Re: They have no idea
Date: Tue, 7 Aug 2007 03:15:50 +0000 (UTC)
Organization: Public Access Networks Corp.
Lines: 45
Message-ID: <f98o56$obc$1@reader2.panix.com>
References: <UpmdnTgehtN9hjLbnZ2dnUVZ_sCtnZ2d@dejazzd.com> <Xns9984AE656E759rumbledorhotmailcom@216.196.97.142> <f986a6$srn$1@reader2.panix.com> <7wlkcow1tu.fsf@ca.icynic.com>
NNTP-Posting-Host: panix2.panix.com
X-Trace: reader2.panix.com 1186456550 24940 166.84.1.2 (7 Aug 2007 03:15:50 GMT)
X-Complaints-To: abuse@panix.com
NNTP-Posting-Date: Tue, 7 Aug 2007 03:15:50 +0000 (UTC)
X-Newsreader: trn 4.0-test76 (Apr 2, 2001)
Xref: g2news2.google.com alt.games.everquest:633

In article <7wlkcow1tu.fsf@ca.icynic.com>,
Don Woods  <don-ns@iCynic.com> wrote:
>
>I also have little doubt (though more than none) that EQ's
>original design and development did NOT include such tools.

	100% correct.  IMHO what you do in that case is start adding
things, require developers to add unit test to the makefiles, add
standard instrumentation, etc.  Build a test framework, nothing much at
first but open enough to be flexible.  Keep a list of bugs that were
fixed:  you had to know had to reproduce it, right?  That's the basis
of your test.  And you had to know how you knew it'd been fixed: there's
the expected output.  It's an ongoing iterative process.

	Taking the AA thing as an example:  first, how will we know
our changes work?  We need some kind of baseline.  Ok, here's a program
that will call some of the important unit functions and here's its expected
output.  Now, let's make our changes.  Whoops, that's not the output we
expect...  What's wrong?  (*That's* testing by the way.)

	Why is this effort less expensive than simply crossing your fingers
and letting your users find the problems?  First of all it's reusable.  Next
time you make an AA change you've already got at least the basic unit test.
Secondly, think of the effort that goes into using the let-your-customers-do-
it method.  You actually do the patch.  Your tech support guys take calls
until someone realizes there's a pattern.  They follow whatever escalation
procedure exists.  Some days later the problem gets to a developer, who has
to stop whatever she's doing and go figure out whether this is really a 
problem and if so how to fix it.  Then she fixes it (we hope! remember,
we really don't have any way of verifying that this time either...) and...
We start all over, with rolling out the patch and taking tech support calls.
And worst of all, we follow that procedure *every* time, and if our business
grows so does the expense of providing the support to your users while they
find your bugs.  And lastly, what if your users find bug #1 today, you fix
it and repatch, and then they find bug #2 (sound familiar?) ?

	So, IMHO refusing to implement sound development and quality
procedures because they're not there already is a mistake, as is refusing
to implement them because of the initial cost.  Not only does a proper
framework cut the actual operating costs but it moves it from a variable
to a fixed cost (making your CFO very much happy).  That lower cost
translates *directly* into a better game, because more cycles are available
for good stuff.  And *that's* why this whole screw-it-the-players-will-find-
the-bugs-lets-go-play-foosball thing bothers me so very much.



