From 7897453357058968133
X-Google-Thread: fb739,eb0cdd906013e951
X-Google-Attributes: gidfb739,public
X-Google-Language: ENGLISH,ASCII-7-bit
Path: g2news1.google.com!news1.google.com!newshub.sdsu.edu!elnk-nf2-pas!newsfeed.earthlink.net!stamper.news.pas.earthlink.net!stamper.news.atl.earthlink.net!newsread3.news.atl.earthlink.net.POSTED!00d81f24!not-for-mail
Newsgroups: alt.games.everquest
From: Tim Smith <reply_in_group@mouse-potato.com>
Subject: Re: city design?
References: <71Ugd.12906$5i5.4245@newsread2.news.atl.earthlink.net> <10o8jmj4iijufed@news.supernews.com> <20041031093741464+0000@usenet.force9.net>
Organization: Institute of Lawsonomy, Department of Suction and Pressure
User-Agent: slrn/0.9.7.4 (OS/2 for ENIAC)
Lines: 26
Message-ID: <81ahd.15333$ta5.1234@newsread3.news.atl.earthlink.net>
Date: Sun, 31 Oct 2004 18:19:48 GMT
NNTP-Posting-Host: 69.34.217.150
X-Complaints-To: abuse@earthlink.net
X-Trace: newsread3.news.atl.earthlink.net 1099246788 69.34.217.150 (Sun, 31 Oct 2004 10:19:48 PST)
NNTP-Posting-Date: Sun, 31 Oct 2004 10:19:48 PST
Xref: g2news1.google.com alt.games.everquest:21472

In article <20041031093741464+0000@usenet.force9.net>, David Navarro wrote:
> AC achieved this at the cost of both everything looking like shit *and*
> looking pretty much the same all over the world. If AC had to stream off
> the disk the same amount of zone-specific model and texture data that EQ
> has, the chugging would be unacceptable. 
> 
> Obviously, I'd love to see a game with both the graphical richness and
> variety of EQ *and* seamless continent-sized areas, but I don't think
> that's going to happen before some serious technological breakthroughs on
> hard drive bandwidth.

Someone else pointed out WoW.  DAoC also has large seamless areas, and has
kept up graphically with the other games.  It's not a hard drive bandwidth
problem that you need to solve to do this in a given game, but rather a data
structure problem.  You need to design your data structures so that the zone
boundaries are dynamic.  Let's imagine we've got a hex grid, and a player
standing in the center of a hex would have everything out to the clipping
plane within that hex.  Let's call each hex a mini-zone.  Design the client
so that it loads the data for that mini-zone, and the six surrounding ones.
When the player moves from one mini-zone to another, you can unload three
mini-zones and load three mini-zones.  Note that you don't have to load
those three mini-zones quickly.  You just have to have them loaded in the
time it takes the player to cross a mini-zone.

-- 
--Tim Smith


