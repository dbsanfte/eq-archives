From -5017337886103989999
X-Google-Language: ENGLISH,ASCII-7-bit
X-Google-Thread: fb739,2c05f56d3e3be438
X-Google-Attributes: gidfb739,public
X-Google-ArrivalTime: 2003-11-25 16:57:41 PST
Path: archiver1.google.com!news2.google.com!news.maxwell.syr.edu!newshosting.com!news-xfer2.atl.newshosting.com!167.206.3.103.MISMATCH!news3.optonline.net!pd7cy1no!shaw.ca!pd7tw1no.POSTED!53ab2750!not-for-mail
X-Trace-PostClient-IP: 24.81.150.191
From: 42 <user@example.net>
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.5) Gecko/20031007
X-Accept-Language: en-us, en
MIME-Version: 1.0
Newsgroups: alt.games.everquest
Subject: Re: Lunatic in the bazaar
References: <bq0l6f$o6e$1@hercules.btinternet.com> <kbn7svg4hjaecftsio7gtgtng3sof4dal3@4ax.com> <6fs7sv0of77011eikpnpd1klqf5n79ins3@4ax.com>
In-Reply-To: <6fs7sv0of77011eikpnpd1klqf5n79ins3@4ax.com>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
Lines: 70
Message-ID: <9USwb.495009$6C4.260681@pd7tw1no>
Date: Wed, 26 Nov 2003 00:57:41 GMT
NNTP-Posting-Host: 24.69.255.206
X-Complaints-To: abuse@shaw.ca
X-Trace: pd7tw1no 1069808261 24.69.255.206 (Tue, 25 Nov 2003 17:57:41 MST)
NNTP-Posting-Date: Tue, 25 Nov 2003 17:57:41 MST
Organization: Shaw Residential Internet
Xref: archiver1.google.com alt.games.everquest:9239

Faeandar wrote:
> On Tue, 25 Nov 2003 23:06:22 +0000, TJ <nospam@hotmail.com> wrote:
> 
> 
> 
>>I woudn't be worried about it, unless your using any 3rd party tsr's
>>in the background /wink
>>
>>As this little babys usually have keystroke recorders built in,
>>and send them (the hackers) your station name and password.
>>
> 
> 
> What's a "tsr"?

In this case its a misnomer. :p

TSR - Terminate & Stay Resident.

Here's the history lesson :)

During system bootstraping the BIOS loads an interrupt vector table into 
a specific chunk of RAM. Then  when something happened (like a keypress, 
or a clock tick) a system interrupt occured, the current running process 
was suspended, the interrupt code was looked up on the interrupt table 
(this is all 'hardwired' btw), and the program code at the address 
pointed to in the table would get executed. When the interrupt ended the 
suspended process was resumed.

Later on BIOSes started providing system services like low level disk 
read/write so software wouldn't have to communicate directly with the 
drive hardware. In order to allow the application software to use these 
services, the interrupt system was re-used, and software would 
explicitly set parameters into the cpu registers, and then trigger the 
interrupt. (The reason the interrupts were used was because it ensured 
that the exact location of the routines in memory could change as bioses 
were updated etc, but the vector table was fixed and could be relied on)

Anyways... still later, we invent the operating system (e.g. DOS). And 
it provides still more services, along with an operating shell program 
that basically was just a few utilities and an application loader. The 
'services' were implemented just like the BIOS ones, and were loaded 
into memory and hooked into the interrupt table. Then the interrupts to 
use and register parameter sets were published as part of the OS 
programming documentation.

Still later... 3rd party application developers used these capabilities 
to write popup programs. (screen catchers, popup calculators, timers, 
screen savers, etc). You'd run the program, it would load the software 
into memory, hook it into then interrupt table, and then exit (The 
"terminate" part) back to the dos shell leaving just the 'event handler' 
still hooked into the interrupt table (the "resident" part). Then when 
the interrupt event occurs the resident part is ultimately called and 
can take over cpu and do its thing.

The normal 'classic' TSR typically hooks into the keyboard interrupt and 
watches for specific keysequences to trigger on, but they can hook into 
the clock-tick, or anything else really. Things like DOS CDROM and Mouse 
drivers are also TSRs, despite not being what most people think of as a 
TSR. Many early virii were also were TSRs. (And keystroke loggers of 
course too).

Under modern OSes everything has changed. A keystroke logger would far 
more likely be just be another application or service (perhaps loaded 
deceptively), and is not a true TSR.

These days some people consider software that spawns another running 
process (particularly one with no overt user interface) and then exits 
as a TSR, and certainly the comparison is valid.



