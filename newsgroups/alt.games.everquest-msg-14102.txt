From 2726538403476524268
X-Google-Language: ENGLISH,ASCII-7-bit
X-Google-Thread: fb739,a038e59396daedfa
X-Google-Attributes: gidfb739,public
X-Google-ArrivalTime: 2001-06-11 02:33:08 PST
Path: archiver1.google.com!newsfeed.google.com!newsfeed.stanford.edu!news-spur1.maxwell.syr.edu!news.maxwell.syr.edu!howland.erols.net!cyclone2.usenetserver.com!news-out.usenetserver.com!news-east.rr.com!news.rr.com!cyclone.kc.rr.com!news.kc.rr.com!cyclone.austin.rr.com!cyclone2.austin.rr.com!typhoon.austin.rr.com.POSTED!not-for-mail
From: dcd@firstnethou.com (Dan Day)
Newsgroups: alt.games.everquest
Subject: Re: Open challenge to Lokari the LIAR!
Message-ID: <3b248637.64461551@news-server.houston.rr.com>
References: <55a3it8g6jibtg7aqjke4hmch91g3qah14@4ax.com> <eon4it81p4580q2l0ir7l3o462shbq1155@4ax.com> <b4p5itk2cmhjqfuj4ftq8qqd2rf1tekdbr@4ax.com> <3b26bcb7.12870025@news-server.houston.rr.com> <9g0uoi$4vv$1@woodrow.ucdavis.edu>
X-Newsreader: Forte Agent 1.01/32.397
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Lines: 82
Date: Mon, 11 Jun 2001 09:17:58 GMT
NNTP-Posting-Host: 24.162.59.130
X-Complaints-To: abuse@rr.com
X-Trace: typhoon.austin.rr.com 992251078 24.162.59.130 (Mon, 11 Jun 2001 04:17:58 CDT)
NNTP-Posting-Date: Mon, 11 Jun 2001 04:17:58 CDT
Organization: Road Runner - Texas
Xref: archiver1.google.com alt.games.everquest:84153

On Sun, 10 Jun 2001 23:10:10 +0000 (UTC), ez064842@sandman.ucdavis.edu (Remington
Stone) wrote:
>}It doesn't need to, the techniques used in that book are
>}still perfectly viable today, and techniques which can steal
>}documents or Unix passwords can steal EQ accounts.
>
>Yes, that's all lovely.  However, I've yet to see anyone do more than 
>speculate about what sort of password encryption EQ uses.

They use public-key encryption, which for short data packets
like passwords is very vulnerable to a classic dictionary 
attack (and, ironically, is the very method used to crack 
the unreversible one-way-encryption that was used to 
"protect" the Unix password files in the book
under discussion.

Yet another method that might well work, depending on how
swift the Verant folks are (and these the same people who
couldn't manage to get Alchemy to work after several patches,
and declared it "working" each time...) is a simple "playback"
approach, in which you don't even bother to hack the password
out of the data stream at all, you simply record it (still
encrypted), and then use a packet-pusher to "hand" the same
encrypted password to the server when you attempt to log 
on to the same account yourself.

There are steps that Verant can take to make both of the
above approaches less feasible, and I hope they have (if
they need pointers I'd be glad to provide some), but
again I'm less than impressed with their technical prowess,
so who knows.  And for every obstacle put in their way,
a competent hacker knows three work-arounds.


>If they use a 
>sufficiently strong encryption, then there's no worries, and Lokari is, in 
>fact, relatively right.

Except that they don't.  Nor can they, really, since the client
software (of necessity) knows absolutely everything necessary to
encrypt the password, INCLUDING the encryption key, and that software
resides on my computer, your computer, and the computer of everyone
who plays EQ.  It's an open book -- anyone with the client program
can use a debugger to watch the client in action and see exactly
how it does the client-to-server encryption.

This is all Crypto 101 -- I mention it not as a blueprint
for any budding hackers, but as a warning to those who
might get too complacent about just how secure their
data actually is (it has been said that cryptography is
the field of scientifically-informed paranoia), and
as a notice to Verant that if they haven't yet plugged
the holes against these very basic cryptanalytical
attacks (and a few dozen other ones I have
not mentioned), they need to do so post haste.
I hate to have to add a disclaimer like that, but
given the way Verant's going, without it I might have
risked getting banned for "promoting" the hacking
of their servers or revealing trade secrets or
something.


>  The only way we could tell for sure is to go try 
>to steal a password and see how tough it is. 

No, there's another way -- know something about how "public client"
software of necessity is constrained to send encrypted data
to a server, and what the necessary limitations are on that
process.

Furthermore, as I've already pointed out, the *incoming* data
stream is encrypted as well (in a failed attempt to defeat
the ShowEq-type packet parsers), using a negotiated session
key, and yet despite that fact (and the fact that ShowEq
does not even deign to snarf the session key from the
client program's memory, which would make it a hell of a lot
easier), the ShowEq gang has consistently managed to break
every new twist that the Verant programmers could think of
of to foil the ShowEq folks' data-hacking efforts.  So I
highly doubt that Verant managed to provide any stronger
encryption on the *other* leg of the data loop.



