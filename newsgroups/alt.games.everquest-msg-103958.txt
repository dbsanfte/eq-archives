From -778660776976793313
X-Google-Language: ENGLISH,ASCII-7-bit
X-Google-Thread: fb739,733f260af307e12f
X-Google-Attributes: gidfb739,public
X-Google-ArrivalTime: 2002-04-06 01:17:38 PST
Path: archiver1.google.com!news1.google.com!newsfeed.stanford.edu!news-spur1.maxwell.syr.edu!news.maxwell.syr.edu!newsfeed1.cidera.com!Cidera!cyclone.tampabay.rr.com!cyclone.austin.rr.com!typhoon.austin.rr.com.POSTED!53ab2750!not-for-mail
From: dcd@firstnethou.com (Dan Day)
Newsgroups: alt.games.everquest
Subject: Re: Poorly Optimized Engine
Message-ID: <3caeb90b.393893858@news-server.houston.rr.com>
References: <a8lc70$t3lq1$1@ID-138685.news.dfncis.de> <4plsauo25i0r6ua7j4229i9v3ltlf2fo0i@4ax.com> <5tvr8.176734$ZR2.95387@rwcrnsc52.ops.asp.att.net> <el6tauskc7j9c9qi7n4c1jqlc8kpo4ppd6@4ax.com>
X-Newsreader: Forte Agent 1.01/32.397
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Lines: 60
Date: Sat, 06 Apr 2002 09:15:26 GMT
NNTP-Posting-Host: 66.25.13.184
X-Complaints-To: abuse@rr.com
X-Trace: typhoon.austin.rr.com 1018084526 66.25.13.184 (Sat, 06 Apr 2002 03:15:26 CST)
NNTP-Posting-Date: Sat, 06 Apr 2002 03:15:26 CST
Organization: Road Runner - Texas
Xref: archiver1.google.com alt.games.everquest:183537

On Sat, 06 Apr 2002 06:57:17 GMT, Lokari <lokari@_nospam_lokari.net> wrote:
> The design I put together
>two years ago was ideal for the specifications at the time, but since
>then there have been eight more releases, with new features in each
>one - and now the design is awful for the current specs. The code is a
>terrible mess.
>
>The client recently approached me for a major change to how the
>program works, and it looks like I'm going to get lucky - they seem to
>understand that in view of all the changes since the first release and
>the requested new functionality, the program needs to be rewritten
>pretty much from scratch. I'll be able to keep some small individual
>routines but the entire general structure has to be tossed out.

I'm in a similar situation, I'm writing a from-the-ground-up
new interface for a still-being-used software product I 
originally wrote in 1982, twenty years ago.

Wow, that's really scary now that I see it in black and white...

The good news is that the calculation and reporting engine does
not need to be significantly changed, it's living on as a
server task.  The other good news is that the spaghetti,
multi-layered user interface (it has survived an evolution
from a FORTRAN text-based mainframe command-mode UI, to a 
text-based PC menu mode, to a C Windows 3.1 app, to a
C++ Win32 app, and all the layers are still there in part) 
is being completely replaced by 100% new lines of code.

The bad news is that it's easy to forget how much work
reimplementing every tiny little feature can be.  What's
ironic is that the "big" new UI features didn't take all
that long to implement, but the 1000 little bells, whistles,
and seldom-used features that still need to be there can
take bloody near *forever* when you've got to rebuild them
all from nothing.  Even adding a simple listbox can take
several days depending on how complexly it interacts with
other data objects and events.  Sometimes it feels like
building a ski slope one teaspoonful of dirt at a time.

Coincidentally, I just read a new "State of the Game Report"
on the EQ website (http://everquest.station.sony.com/eqlive/indev.jsp)
that describes their similar battle with the brand new
EQ user interface:

     EverQuest's interface consists of over 5,000 interface
     elements spanning 140 screens, tools, and windows. 
     Some may not know this, but GMs and Guides have their  
     own administrative screens in the EverQuest game client. 
     In addition, Designers, Artists, and Animators have some
     of their tools built right in as well. All of these need 
     to be recreated in the new interface.

     Writing a new, solid system and integrating it with 
     that many moving parts is a large and complicated job. 
     It's compounded by the fact that while doing this, we 
     need to make sure that we don't break either of the 
     two existing interfaces. It's definitely an interesting 
     balancing act.



