From 5329717866344724757
X-Google-Language: ENGLISH,ASCII-7-bit
X-Google-Thread: fb739,2c05f56d3e3be438
X-Google-Attributes: gidfb739,public
X-Google-ArrivalTime: 2003-11-26 21:23:21 PST
Path: archiver1.google.com!news2.google.com!news.maxwell.syr.edu!elnk-pas-nf1!newsfeed.earthlink.net!pd7cy1no!shaw.ca!pd7tw3no.POSTED!53ab2750!not-for-mail
X-Trace-PostClient-IP: 24.81.150.191
From: 42 <user@example.net>
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.5) Gecko/20031007
X-Accept-Language: en-us, en
MIME-Version: 1.0
Newsgroups: alt.games.everquest
Subject: Re: Lunatic in the bazaar
References: <bq0l6f$o6e$1@hercules.btinternet.com> <kbn7svg4hjaecftsio7gtgtng3sof4dal3@4ax.com> <6fs7sv0of77011eikpnpd1klqf5n79ins3@4ax.com> <9USwb.495009$6C4.260681@pd7tw1no> <vsaku7t6ta7p2e@corp.supernews.com>
In-Reply-To: <vsaku7t6ta7p2e@corp.supernews.com>
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
Lines: 46
Message-ID: <dTfxb.502611$pl3.239883@pd7tw3no>
Date: Thu, 27 Nov 2003 05:23:21 GMT
NNTP-Posting-Host: 24.69.255.206
X-Complaints-To: abuse@shaw.ca
X-Trace: pd7tw3no 1069910601 24.69.255.206 (Wed, 26 Nov 2003 22:23:21 MST)
NNTP-Posting-Date: Wed, 26 Nov 2003 22:23:21 MST
Organization: Shaw Residential Internet
Xref: archiver1.google.com alt.games.everquest:9396

Anthony Stewart wrote:
> WHAT?

Either I aimed too high or you vehemently disagree.

If it was the former, I apologize...heres some clarification...

What is an interrupt?

Technically its an 'event', often from hardware, that must be handled 
'immediately' thus when the cpu sees an interrupt it 'interrupts' the 
current program, suspends it, and passes execution over to the interrupt 
handler specified by the interrupt vector table.

What is the interrupt vector table?

A simple list ['vector'] of memory addresses; each stating the 'entry 
point' of an interrupt handler. The position in the list corresponds to 
the interrupt code it handles.

What is an interrupt handler?

Basically a peice of code stored in memory. It gets executed whenever 
the right interrupt event occurs. An interrupt handler ... handles the 
interrupt... and performs an 'appropriate task'. The interrupt handler 
for a clock tick updates the date and time. The interrupt handler for a 
keypress adds the keystroke record to a queue where they sit waiting 
until an application polls for keystrokes, etc etc etc.

How does an interrupt occur?

Two ways: the first is literally hardwired...  a hardware event happens, 
and the wires light up and the cpu watching the interrupt lines responds 
responds. The second is via an interrupt cpu instruction that 
essentially programmatically triggers the interrupt.

What does all that have to do with a TSR?

A 3rd party interrupt handler can be injected "between" the normal 
keypress handler (for example) by changing the value in the interrupt 
vector table to point to itself, performing its own code, and then 
(optionally) passing execution to the original interrupt handler.

Programs that load an interrupt handler into memory, update the 
interrupt vector table, and then exit are TSRs.



