/alias {OemResetSession} {/showme {@Chr(10)@AnsiBold()@ForeYellow()**OEM Session @ForeGreen()RESET!!@AnsiReset()};/clearlist OEMsessKills;/var OEMSessionTimer @Time();/var OEMsessXP 0;/var OEMsessTapXP 0;/var OEMsessKills 0;/var OEMsessTapCount 0;/var OEMsessTapXP 0;/clearlist OEMsessNames;/if {@GetCount(OEMNames)>0} {/loop {1,@GetCount(OEMNames),LoopOne} {/loop {13,24,LoopTwo} {/assign {@GetItem(OEMNames,$LoopOne)} {$LoopTwo} {0}}}}} {OEM}

/listadd {OEMsessKills} {OEM}

/alias {oemmobs %0} {/if {@IsEmpty($0)==1} {/showme {@Chr(10)@AnsiBold()@ForeYellow()OEM Mobs:@Chr(10)@ForeBlue()[@ForeCyan()@GetCount(OEMNames)@ForeBlue()] total mobs, [@ForeCyan()@GetCount(OEMsessKills)@ForeBlue()] mobs killed this session, [@ForeCyan()@GetCount(OEMsessNames)@ForeBlue()] unique mobs this session.@Chr(10)@ForeBlue()"@ForeCyan()oemmobs 1@ForeBlue()" - list out index of ALL mobs you've ever killed.@Chr(10)"@ForeCyan()oemmobs 2@ForeBlue()" - list out index of ALL mobs you've killed this session.@Chr(10)"@ForeCyan()oemmobs 3@ForeBlue()" - list out index of new UNIQUE mobs killed this session.@AnsiReset()}} {/if {@IsNumber($0) && $0>0 && $0<=3} {/if {$0==1} {/var temp {@Chr(10)@AnsiBold()@ForeYellow()OEM Mobs: @ForeBlue()ALL mobs killed:@Chr(10)@ForeWhite()INDEX @AnsiReset()Name@Chr(10)};/loop {1,@GetCount(OEMNames)} {/var {temp} {$temp@AnsiBold()@ForeWhite()@PadLeft($LoopCount,0,@Math(4-@Len($LoopCount))): @AnsiReset()@GetItem(OEMNames,$LoopCount)@Chr(10)}};/showme {$temp@AnsiReset()@ForeGreen()Use "oemview <index#>" to view a mob.@AnsiReset()}} {/if {$0==2 && @GetCount(OEMsessKills)>0} {/var temp {@Chr(10)@AnsiBold()@ForeYellow()OEM Mobs: @ForeBlue()All mobs killed, this session:@Chr(10)@ForeWhite()INDEX @AnsiReset()Name@Chr(10)};/loop {1,@GetCount(OEMNames)} {/if {@InList(OEMsessKills,@GetItem(OEMNames,$LoopCount))==1} {/var {temp} {$temp@AnsiBold()@ForeWhite()@PadLeft($LoopCount,0,@Math(4-@Len($LoopCount))): @AnsiReset()@GetItem(OEMNames,$LoopCount)@Chr(10)}}};/showme {$temp@AnsiReset()@ForeGreen()Use "oemview <index#>" to view a mob.@AnsiReset()}} {/if {$0==3 && @GetCount(OEMsessNames)>0} {/var temp {@Chr(10)@AnsiBold()@ForeYellow()OEM Mobs: @ForeBlue()New Unique Mobs killed this session:@Chr(10)@ForeWhite()INDEX @AnsiReset()Name@Chr(10)};/loop {1,@GetCount(OEMNames)} {/if {@InList(OEMsessNames,@GetItem(OEMNames,$LoopCount))==1} {/var {temp} {$temp@AnsiBold()@ForeWhite()@PadLeft($LoopCount,0,@Math(4-@Len($LoopCount))): @AnsiReset()@GetItem(OEMNames,$LoopCount)@Chr(10)}}};/showme {$temp@AnsiReset()@ForeGreen()Use "oemview <index#>" to view a mob.@AnsiReset()}}} {/showme {@Chr(10)@AnsiBold()@ForeYellow()OEM Mobs: @ForeBlue()[@ForeCyan()@GetCount(OEMNames)@ForeBlue()] total mobs, [@ForeCyan()@GetCount(OEMsessKills)@ForeBlue()] mobs killed this session, [@ForeCyan()@GetCount(OEMsessNames)@ForeBlue()] new unique mobs this session.@Chr(10)@ForeBlue()"@ForeCyan()oemmobs 1@ForeBlue()" - list out index of ALL mobs you've ever killed.@Chr(10)"@ForeCyan()oemmobs 2@ForeBlue()" - list out index of ALL mobs you've killed this session.@Chr(10)"@ForeCyan()oemmobs 3@ForeBlue()" - list out index of new UNIQUE mobs killed this session.@AnsiReset()}}}}}} {OEM}

/action {%3 is DEAD!} {/var {OEMLastName} {@Lower($3)}} {OEM}

/action {^You receive %3 exp%0rience points from the battle of %1 total.} {/itemadd {OEMsessKills} {$OEMLastName};/if {@Exists(@Lower(@Var(OEMLastName)))==0} {/empty {@Lower(@Var(OEMLastName))} {OEM};/itemadd {OEMsessNames} {@Lower(@Var(OEMLastName))};/itemadd {OEMNames} {@Lower(@Var(OEMLastName))};/array {@Lower(@Var(OEMLastName))} {24} {OEM};/loop {1,24} {/assign {@Lower(@Var(OEMLastName))} {$LoopCount} {0}}};/var OEMttlKills {@Math($OEMttlKills+1)};/var OEMsessKills {@Math($OEMsessKills+1)};/var {OEMLastXp} {$3};/var {OEMttlXP} {@Math($OEMttlXP+$3)};/var {OEMsessXP} {@Math($OEMsessXP+$3)};/assign {@Var(OEMLastName)} {1} {@Math(@GetArray(@Var(OEMLastName),1)+1)};/assign {@Var(OEMLastName)} {3} {@Math(@GetArray(@Var(OEMLastName),3)+1)};/assign {@Var(OEMLastName)} {5} {@Math(@GetArray(@Var(OEMLastName),5)+$3)};/assign {@Var(OEMLastName)} {7} {@Math(@GetArray(@Var(OEMLastName),5)/@GetArray(@Var(OEMLastName),3))};/if {$OEMLastXp>@GetArray(@Var(OEMLastName),9)} {/assign {@Var(OEMLastName)} {9} {$OEMLastXp}};/if {$OEMLastXp<@GetArray(@Var(OEMLastName),11) || @GetArray(@Var(OEMLastName),11)==0} {/assign {@Var(OEMLastName)} {11} {$OEMLastXp}};/assign {@Var(OEMLastName)} {13} {@Math(@GetArray(@Var(OEMLastName),13)+1)};/assign {@Var(OEMLastName)} {15} {@Math(@GetArray(@Var(OEMLastName),15)+1)};/assign {@Var(OEMLastName)} {17} {@Math(@GetArray(@Var(OEMLastName),17)+$3)};/assign {@Var(OEMLastName)} {19} {@Math(@GetArray(@Var(OEMLastName),17)/@GetArray(@Var(OEMLastName),15))};/if {$OEMLastXp>@GetArray(@Var(OEMLastName),21)} {/assign {@Var(OEMLastName)} {21} {$OEMLastXp}};/if {$OEMLastXp<@GetArray(@Var(OEMLastName),23) || @GetArray(@Var(OEMLastName),23)==0} {/assign {@Var(OEMLastName)} {23} {$OEMLastXp}}} {OEM}

/action {^You are awarded %3 experience poi%5ts for the battle.} {/itemadd {OEMsessKills} {$OEMLastName};/if {@Exists(@Lower(@Var(OEMLastName)))==0} {/empty {@Lower(@Var(OEMLastName))} {OEM};/itemadd {OEMsessNames} {@Lower(@Var(OEMLastName))};/itemadd {OEMNames} {@Lower(@Var(OEMLastName))};/array {@Lower(@Var(OEMLastName))} {24} {OEM};/loop {1,24} {/assign {@Lower(@Var(OEMLastName))} {$LoopCount} {0}}};/var OEMttlKills {@Math($OEMttlKills+1)};/var OEMsessKills {@Math($OEMsessKills+1)};/var {OEMLastXp} {$3};/var {OEMttlXP} {@Math($OEMttlXP+$3)};/var {OEMsessXP} {@Math($OEMsessXP+$3)};/assign {@Var(OEMLastName)} {1} {@Math(@GetArray(@Var(OEMLastName),1)+1)};/assign {@Var(OEMLastName)} {2} {@Math(@GetArray(@Var(OEMLastName),2)+1)};/assign {@Var(OEMLastName)} {4} {@Math(@GetArray(@Var(OEMLastName),4)+$OEMLastXp)};/assign {@Var(OEMLastName)} {6} {@Math(@GetArray(@Var(OEMLastName),4)/@GetArray(@Var(OEMLastName),2))};/if {$OEMLastXp>@GetArray(@Var(OEMLastName),8)} {/assign {@Var(OEMLastName)} {8} {$OEMLastXp}};/if {$OEMLastXp<@GetArray(@Var(OEMLastName),10) || @GetArray(@Var(OEMLastName),10)==0} {/assign {@Var(OEMLastName)} {10} {$OEMLastXp}};/assign {@Var(OEMLastName)} {13} {@Math(@GetArray(@Var(OEMLastName),13)+1)};/assign {@Var(OEMLastName)} {14} {@Math(@GetArray(@Var(OEMLastName),14)+1)};/assign {@Var(OEMLastName)} {16} {@Math(@GetArray(@Var(OEMLastName),16)+$OEMLastXp)};/assign {@Var(OEMLastName)} {18} {@Math(@GetArray(@Var(OEMLastName),16)/@GetArray(@Var(OEMLastName),14))};/if {$OEMLastXp>@GetArray(@Var(OEMLastName),20)} {/assign {@Var(OEMLastName)} {20} {$OEMLastXp}};/if {$OEMLastXp<@GetArray(@Var(OEMLastName),22) || @GetArray(@Var(OEMLastName),22)==0} {/assign {@Var(OEMLastName)} {22} {$OEMLastXp}}} {OEM}

/action {^EXPERIENCE Gain canceled (IN NE%8TRAL AREA)} {/var {OEMttlXP} {@Math($OEMttlXP-$OEMLastXp)};/var {OEMsessXP} {@Math($OEMsessXP-$OEMLastXp)};/var {OEMttlXpGanked} {@Math($OEMttlXpGanked-$OEMLastXp)};/var {OEMsessXpGanked} {@Math($OEMsessXpGanked)-$OEMLastXp)};/assign {@Var(OEMLastName)} {12} {@Math(@GetArray(@Var(OEMLastName),12)-$OEMLastXp)};/assign {@Var(OEMLastName)} {24} {@Math(@GetArray(@Var(OEMLastName),24)-$OEMLastXp)}} {OEM}

/action {^You are rewarded wi%5h %2 experience points for your sacrifice.} {/var {OEMttlTapXP} {@Math($OEMttlTapXP+$2)};/var {OEMsessTapXP} {@Math($OEMsessTapXP+$2)};/var {OEMttlTapCount} {@Math($OEMttlTapCount+1)};/var {OEMsessTapCount} {@Math($OEMsessTapCount+1)}} {OEM}

/action {You are rewarded wi%5h %2 experience for your sacrifice.}  {/var {OEMttlTapXP} {@Math($OEMttlTapXP+$2)};/var {OEMsessTapXP} {@Math($OEMsessTapXP+$2)};/var {OEMttlTapCount} {@Math($OEMttlTapCount+1)};/var {OEMsessTapCount} {@Math($OEMsessTapCount+1)}} {OEM}

/listadd {OEMNames} {OEM}
/listadd {OEMsessNames} {OEM}

/var {OEMttlKills} {0} {OEM}
/var {OEMsessKills} {0} {OEM}
/var {OEMSessionTimer} {0} {OEM}
/var {OEMLastName} {null} {OEM}
/var {OEMttlTapCount} {0} {OEM}
/var {OEMsessTapCount} {0} {OEM}
/var {OEMsessTapXP} {0} {OEM}
/var {OEMttlTapXP} {0} {OEM}
/var {OEMttlXP} {0} {OEM}
/var {OEMsessXP} {0} {OEM}
/var {OEMLastXp} {0} {OEM}
/var {OEMttlXpGanked} {0} {OEM}
/var {OEMsessXpGanked} {0} {OEM}

/alias {oem %0} {/if {"@Lower($0)"="help" || $0="?"} {OemShowMe} {/if {"@Lower($0)"=="reset"} {OemResetSession} {/if {"@Lower($0)"=="save"} {/writegroup oem.txt OEM} {/if {"@Lower($0)"=="load"} {/read oem.txt} {OemShowMe}}}}} {OEM}

/alias {OemShowMe} {/showme {@Chr(10)@AnsiBold()@ForeYellow()**OEM @ForeCyan()Valid commands:@Chr(10)@ForeGreen()oem reset @ForeBlue()- Reset the Session information. OEM will continue to store the grand totals, this resets the interm scoring so you can see totals, take a breather, reset it and see new totals (runs a timer too to track averages).@Chr(10)@ForeGreen()oem save @AnsiReset()@ForeBlue()- save the script, use it often. :)@Chr(10)@AnsiBold()@ForeGreen()oem load @ForeBlue()- load the saved script. You might make this an event so it fires as soon as you start mm.. /event {OEMstart} {1} {/read oem.txt;/disableevent OEMstart}.@Chr(10)@ForeGreen()oemfind <some string> @AnsiReset()@ForeBlue()- search for the index number of a string. ie: oemfind shady rouge --> 013 a shady rogue. Then you can use that index number to look up the info on that mob with...@Chr(10)@AnsiBold()@ForeGreen()oemview <index#> @ForeBlue()- view info on a mob in the database.@Chr(10)@ForeGreen()oemsort @AnsiReset()@ForeBlue()- to see options on sorting info.@Chr(10)@AnsiBold()@ForeGreen()oemlist <value#> @ForeBlue()- after sorting use this to list out all or the "top ##" of sorted entries. Use a negative value to view sorted by the lowest items ("oemlist -3")@Chr(10)@ForeGreen()oeminfo @AnsiReset()@ForeBlue()- Display general info (Totals/Session).@Chr(10)@AnsiBold()@ForeGreen()oemmobs @ForeBlue()- show an indexed list of ALL mobs killed, ALL mobs killed this session, or new unique mobs killed this session.@AnsiReset()}} {OEM}

/alias {oemfind %9} {/showme {@AnsiBold()@Chr(10)@ForeYellow()OEM Find: @ForeBlue()"@ForeCyan()$9@ForeBlue()"@Chr(10)@ForeWhite()INDEX  @AnsiReset()Name};/loop {1,@GetCount(OEMNames)} {/if {@StrStr(@GetItem(OEMNames,$LoopCount),$9)!=-1} {/showme {@AnsiBold()@ForeWhite()@PadLeft($LoopCount,0,@Math(4-@Len($LoopCount))): @AnsiReset()@GetItem(OEMNames,$LoopCount)}}};/showme {@ForeGreen()To view a specific mob, do: @ForeBlue()oemview <index#>@AnsiReset()}} {OEM}


/alias {oemsort %0} {/if {@IsEmpty($0) || @IsNumber($0)==0} {OemSortSpew} {/if {$0>24 || $0<=0} {/showme {@Chr(10)@AnsiBold()@ForeYellow()OEM Sort: @ForeRed()Value must be between 1 and 24. Type "oemsort" for info.@Chr(10)@AnsiReset()}} {/if {@GetCount(OEMNames)<=0} {/showme {@Chr(10)@AnsiBold()@ForeYellow()OEM Sort: @ForeRed()Go kill something first, there is no stored info! :p@Chr(10)@AnsiReset()}} {/clearlist OEMLister;/loop {1,@GetCount(OEMNames)} {/itemadd OEMLister {@PadLeft(@GetArray(@GetItem(OEMNames,$LoopCount),$0), ,@Math(12-@Len(@GetArray(@GetItem(OEMNames,$LoopCount),$0)))) - @GetItem(OEMNames,$LoopCount)}};/showme {@Chr(10)@AnsiBold()@ForeYellow()OEM Sort: @ForeBlue()Sorted [@ForeCyan()@GetCount(OEMLister)@ForeBlue()] entries. To view them do: "@ForeGreen()oemlist <#>@ForeBlue()", where <#> is the number of entries you'd like to view (This will list the best-to-worst, so "oemlist 10" would show the 10 highest values.) To view them ALL, just do: "@ForeGreen()oemlist@ForeBlue()".@Chr(10)}}}}} {OEM}

/alias {oemlist %0} {/if {@IsEmpty($0)==1 && @GetCount(OEMLister)>=1} {/var temp {@Chr(10)};/loop {@GetCount(OEMLister),1} {/var {temp} {@ConCat($temp,@GetItem(OEMLister,$LoopCount)@Chr(10))}};/showme {@AnsiBold()@ForeYellow()OEM List: @ForeBlue()Showing ALL [@ForeCyan()@GetCount(OEMLister)@ForeBlue()] entries!@Chr(10)$temp@AnsiReset()}} {/if {@Abs($0)>0 && @Abs($0)<=@GetCount(OEMLister)} {/var temp {@Chr(10)};/if {$0>0} {/loop {@GetCount(OEMLister),@Math((@GetCount(OEMLister)-$0)+1)} {/var temp {@ConCat($temp,@GetItem(OEMLister,$LoopCount)@Chr(10))}};/showme {@AnsiBold()@ForeYellow()OEM List: @ForeBlue()Showing the TOP [@ForeCyan()$0@ForeBlue()] entries!@Chr(10)$temp@AnsiReset()}} {/loop {1,@Abs($0)} {/var temp {@ConCat($temp,@GetItem(OEMLister,$LoopCount)@Chr(10))}};/showme {@AnsiBold()@ForeYellow()OEM List: @ForeBlue()Showing the LOWEST [@ForeCyan()@Abs($0)@ForeBlue()] entries!@Chr(10)$temp@AnsiReset()}}} {/showme {@AnsiBold()@ForeYellow()OEM List: @ForeBlue()You supplied an invalid value. There are [@ForeCyan()@GetCount(OEMLister)@ForeBlue()] sorted items. Please use a value from 1-@GetCount(OEMLister), or use "oemlist" to view them ALL. Use a negative value to view the LOWEST ranges. "oemlist -3" ..shows the lowest 3 values.}}}} {OEM}

/listadd {OEMLister} {OEM}

/alias {OemSortSpew} {/showme {@Chr(10)@AnsiBold()@ForeCyan()"oemsort <#>" will sort out all the information that's stored for each indivigual mob. There are 24 fields that you can sort. When sorted you only see information about the field you've chosen, but with all mobs listed that you've killed. The lists can get quit long!@Chr(10)@AnsiReset()@ForeCyan()Below are the numbers you can use, and the field that will be sorted@Chr(10)@AnsiBold()@ForeGreen()---<Grand Total Fields>---@Chr(10)@ForeGreen() 1 @ForeBlue()- Sort by Mobs you've killed most often, grouped and solo.@Chr(10)@ForeGreen() 2 @ForeBlue()- Sort by Mobs you've killed the most, when solo.@Chr(10)@ForeGreen() 3 @ForeBlue()- Sort by Mobs you've killed the most, when grouped.@Chr(10)@ForeGreen() 4 @ForeBlue()- Sort by Mobs that have given the most xp (multiple kills), when solo.@Chr(10)@ForeGreen() 5 @ForeBlue()- Sort by Mobs that have given the most xp (multiple kills), when grouped.@Chr(10)@ForeGreen() 6 @ForeBlue()- Sort by the highest average xp per kill given when solo.@Chr(10)@ForeGreen() 7 @ForeBlue()- Sort by the highest average xp per kill given when grouped.@Chr(10)@ForeGreen() 8 @ForeBlue()- Sort by the most xp given by any single mob, when solo.@Chr(10)@ForeGreen() 9 @ForeBlue()- Sort by the most xp given by any single mob, when grouped.@Chr(10)@ForeGreen()10 @ForeBlue()- Sort by the least xp given by any single mob, when solo.@Chr(10)@ForeGreen()11 @ForeBlue()- Sort by the least xp given by any single mob, when grouped.@Chr(10)@ForeGreen()12 @ForeBlue()- Sort by the most xp removed due to being in NPK, grouped and solo.@Chr(10)@ForeCyan()---<Current Session Fields>---@Chr(10)@ForeCyan()13 @ForeBlue()- Sort by Mobs you've killed most often, grouped and solo.@Chr(10)@ForeCyan()14 @ForeBlue()- Sort by Mobs you've killed most often, when solo.@Chr(10)@ForeCyan()15 @ForeBlue()- Sort by Mobs you've killed most often, while grouped.@Chr(10)@ForeCyan()16 @ForeBlue()- Sort by the total xp given (multi-kills), when solo.@Chr(10)@ForeCyan()17 @ForeBlue()- Sort by the total xp given (multi-kills), when grouped.@Chr(10)@ForeCyan()18 @ForeBlue()- Sort by the highest average xp per kill, when solo.@Chr(10)@ForeCyan()19 @ForeBlue()- Sort by the highest average xp per kill, when grouped.@Chr(10)@ForeCyan()20 @ForeBlue()- Sort by the best xp given (single kill), when solo.@Chr(10)@ForeCyan()21 @ForeBlue()- Sort by the best xp given (single kill), when grouped.@Chr(10)@ForeCyan()22 @ForeBlue()- Sort by the least xp given (single kill), when solo.@Chr(10)@ForeCyan()23 @ForeBlue()- Sort by the least xp given (single kill), when grouped.@Chr(10)@ForeCyan()24 @ForeBlue()- Sort by the most xp removed due to being in NPK (grouped and solo).@Chr(10)@AnsiReset()}} {OEM}

/alias {oemview %0} {/if {@IsNumber($0)==0} {/showme {@Chr(10)@AnsiBold()@ForeYellow()OEM View: @ForeRed()Value must be a number, no text}} {/if {$0<=0 || $0>@GetCount(OEMNames)} {/showme {@Chr(10)@AnsiBold()@ForeYellow()OEM View: @ForeRed()Current index range is: @ForeBlue()[@ForeCyan()1-@GetCount(OEMNames)@ForeBlue()] @ForeRed()Please use a valid index number!}} {/showme {@Chr(10)@AnsiBold()@ForeYellow()OEM View: @ForeBlue() Viewing index: [@ForeCyan()$0@ForeBlue()] @ForeCyan()@GetItem(OEMNames,$0)@Chr(10)@ForeBlue()---<@ForeCyan()Field@ForeBlue()>---              @ForeRed()---<@ForeYellow()Grand Totals@ForeRed()>--- @ForeGreen()---<@ForeWhite()Session Totals@ForeGreen()>---@Chr(10)@ForeBlue()Total Kills:@AnsiReset()...............@PadLeft(@AnsiBold()@ForeRed()[@ForeYellow()@GetArray($0,1)@ForeRed()]@AnsiReset(),.,@Math(18-@Len(@GetArray($0,1))))@AnsiReset()@PadLeft(@AnsiBold()@ForeGreen()[@ForeWhite()@GetArray($0,13)@ForeGreen()]@AnsiReset(),.,@Math(21-@Len(@GetArray($0,13))))@Chr(10)@AnsiBold()@ForeBlue()Total Kills, Solo:@AnsiReset().........@PadLeft(@AnsiBold()@ForeRed()[@ForeYellow()@GetArray($0,2)@ForeRed()]@AnsiReset(),.,@Math(18-@Len(@GetArray($0,2))))@AnsiReset()@PadLeft(@AnsiBold()@ForeGreen()[@ForeWhite()@GetArray($0,14)@ForeGreen()]@AnsiReset(),.,@Math(21-@Len(@GetArray($0,14))))@Chr(10)@AnsiBold()@ForeBlue()Total Kills, Grouped:@AnsiReset()......@PadLeft(@AnsiBold()@ForeRed()[@ForeYellow()@GetArray($0,3)@ForeRed()]@AnsiReset(),.,@Math(18-@Len(@GetArray($0,3))))@AnsiReset()@PadLeft(@AnsiBold()@ForeGreen()[@ForeWhite()@GetArray($0,15)@ForeGreen()]@AnsiReset(),.,@Math(21-@Len(@GetArray($0,15))))@Chr(10)@AnsiBold()@ForeBlue()Total Xp, Solo:@AnsiReset()............@PadLeft(@AnsiBold()@ForeRed()[@ForeYellow()@GetArray($0,4)@ForeRed()]@AnsiReset(),.,@Math(18-@Len(@GetArray($0,4))))@AnsiReset()@PadLeft(@AnsiBold()@ForeGreen()[@ForeWhite()@GetArray($0,16)@ForeGreen()]@AnsiReset(),.,@Math(21-@Len(@GetArray($0,16))))@Chr(10)@AnsiBold()@ForeBlue()Total Xp, Grouped:@AnsiReset().........@PadLeft(@AnsiBold()@ForeRed()[@ForeYellow()@GetArray($0,5)@ForeRed()]@AnsiReset(),.,@Math(18-@Len(@GetArray($0,5))))@AnsiReset()@PadLeft(@AnsiBold()@ForeGreen()[@ForeWhite()@GetArray($0,17)@ForeGreen()]@AnsiReset(),.,@Math(21-@Len(@GetArray($0,17))))@Chr(10)@AnsiBold()@ForeBlue()Avg. Xp per Kill, Solo:@AnsiReset()....@PadLeft(@AnsiBold()@ForeRed()[@ForeYellow()@GetArray($0,6)@ForeRed()]@AnsiReset(),.,@Math(18-@Len(@GetArray($0,6))))@AnsiReset()@PadLeft(@AnsiBold()@ForeGreen()[@ForeWhite()@GetArray($0,18)@ForeGreen()]@AnsiReset(),.,@Math(21-@Len(@GetArray($0,18))))@Chr(10)@AnsiBold()@ForeBlue()Avg. Xp per Kill, Grouped:@AnsiReset().@PadLeft(@AnsiBold()@ForeRed()[@ForeYellow()@GetArray($0,7)@ForeRed()]@AnsiReset(),.,@Math(18-@Len(@GetArray($0,7))))@AnsiReset()@PadLeft(@AnsiBold()@ForeGreen()[@ForeWhite()@GetArray($0,19)@ForeGreen()]@AnsiReset(),.,@Math(21-@Len(@GetArray($0,19))))@Chr(10)@AnsiBold()@ForeBlue()Max. Xp From a Kill, Solo:@AnsiReset().@PadLeft(@AnsiBold()@ForeRed()[@ForeYellow()@GetArray($0,8)@ForeRed()]@AnsiReset(),.,@Math(18-@Len(@GetArray($0,8))))@AnsiReset()@PadLeft(@AnsiBold()@ForeGreen()[@ForeWhite()@GetArray($0,20)@ForeGreen()]@AnsiReset(),.,@Math(21-@Len(@GetArray($0,20))))@Chr(10)@AnsiBold()@ForeBlue()Max. Xp From a Kill, Grp:@AnsiReset()..@PadLeft(@AnsiBold()@ForeRed()[@ForeYellow()@GetArray($0,9)@ForeRed()]@AnsiReset(),.,@Math(18-@Len(@GetArray($0,9))))@AnsiReset()@PadLeft(@AnsiBold()@ForeGreen()[@ForeWhite()@GetArray($0,21)@ForeGreen()]@AnsiReset(),.,@Math(21-@Len(@GetArray($0,21))))@Chr(10)@AnsiBold()@ForeBlue()Min. Xp From a Kill, Solo:@AnsiReset().@PadLeft(@AnsiBold()@ForeRed()[@ForeYellow()@GetArray($0,10)@ForeRed()]@AnsiReset(),.,@Math(18-@Len(@GetArray($0,10))))@AnsiReset()@PadLeft(@AnsiBold()@ForeGreen()[@ForeWhite()@GetArray($0,22)@ForeGreen()]@AnsiReset(),.,@Math(21-@Len(@GetArray($0,22))))@Chr(10)@AnsiBold()@ForeBlue()Min. Xp From a Kill, Grp:@AnsiReset()..@PadLeft(@AnsiBold()@ForeRed()[@ForeYellow()@GetArray($0,11)@ForeRed()]@AnsiReset(),.,@Math(18-@Len(@GetArray($0,11))))@AnsiReset()@PadLeft(@AnsiBold()@ForeGreen()[@ForeWhite()@GetArray($0,23)@ForeGreen()]@AnsiReset(),.,@Math(21-@Len(@GetArray($0,23))))@Chr(10)@AnsiBold()@ForeBlue()Xp Lost (Npk'd player):@AnsiReset()....@PadLeft(@AnsiBold()@ForeRed()[@ForeYellow()@GetArray($0,12)@ForeRed()]@AnsiReset(),.,@Math(18-@Len(@GetArray($0,12))))@AnsiReset()@PadLeft(@AnsiBold()@ForeGreen()[@ForeWhite()@GetArray($0,24)@ForeGreen()]@AnsiReset(),.,@Math(21-@Len(@GetArray($0,24))))@AnsiReset()}}}} {OEM}

/var {OEMXpSec} {0} {OEM}

/alias {oeminfo} {/calldll Math {Div} {$OEMsessXP @Math(@Time()-@Var(OEMSessionTimer)) OEMXpSec};/showme {@Chr(10)@AnsiBold()@ForeYellow()OEM Info:@Chr(10)@ForeBlue()Current Session Set At: @ForeCyan()@TimeToHour($OEMSessionTimer)@ForeBlue():@ForeCyan()@TimeToMinute($OEMSessionTimer)@ForeBlue():@ForeCyan()@TimeToSecond($OEMSessionTimer) @ForeBlue()On: @ForeCyan()@Math(1+@TimeToMonth($OEMSessionTimer))@ForeBlue()/@ForeCyan()@TimeToDay($OEMSessionTimer)@ForeBlue()/@ForeCyan()@TimeToYear($OEMSessionTimer)@Chr(10)@ForeBlue()Current Session Running For: @ForeCyan()@Math(((@Time()-$OEMSessionTimer)/60)/60)@ForeBlue()hr @ForeCyan()@Math(((@Time()-$OEMSessionTimer)/60)%60)@ForeBlue()min @ForeCyan()@Math(((@Time()-$OEMSessionTimer)%60)%60)@ForeBlue()sec@Chr(10)You have gained @ForeCyan()@Var(OEMsessXP)@ForeBlue()xp this session, and @ForeCyan()@Var(OEMttlXP) @ForeBlue()total xp.@Chr(10)You have tapped [@ForeCyan()@Var(OEMsessTapCount)@ForeBlue()] objects for [@ForeCyan()@Var(OEMsessTapXP)@ForeBlue()]xp this session.@Chr(10)You have tapped a total of [@ForeCyan()@Var(OEMttlTapCount)@ForeBlue()] objects for [@ForeCyan()@Var(OEMttlTapXP)@ForeBlue()]xp.@Chr(10)You have killed [@ForeCyan()@GetCount(OEMsessNames)@ForeBlue()] unique mobs this session. and [@ForeCyan()@GetCount(OEMNames)@ForeBlue()] total unique mobs.@Chr(10)You have killed [@ForeCyan()@Var(OEMsessKills)@ForeBlue()] mobs this session, and killed [@ForeCyan()@Var(OEMttlKills)@ForeBlue()] mobs in total.@Chr(10)You are averaging [@ForeCyan()@Var(OEMXpSec)@ForeBlue()]xp per second this session.@AnsiReset()@Chr(10)}} {OEM}

