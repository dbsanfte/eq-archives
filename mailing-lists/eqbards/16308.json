{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":0,"authorName":"Ryan Honeyman","from":"Ryan Honeyman &lt;honeyman@...&gt;","replyTo":"LIST","senderId":"hUPqlH5m8_q6K6YOozxSjnyheTT2g3ZfXA64Uf8UsCrPkYEkTrg_ED6-xYxUEgWtk_fs5fJJV_CGDNScUVn8Hz8hGjj__G5fj757PA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"[eqbards] Song DB Model. (request for comments)","postDate":"953325829","msgId":16308,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuR1NPLjMuOTUuMTAwMDMxNzE1MjYzMS4yMjI4NUEtMTAwMDAwQGRhbGk+"},"prevInTopic":0,"nextInTopic":16309,"prevInTime":16307,"nextInTime":16309,"topicId":16308,"numMessagesInTopic":9,"msgSnippet":"I know there are a lot of technical people on this list. You all have provided excellent feedback about numerous things in the past, so I will post this here","messageBody":"<div id=\"ygrps-yiv-469654289\">I know there are a lot of technical people on this list.<br/>\n  You all have provided excellent feedback about numerous<br/>\n  things in the past, so I will post this here for discussion.<br/>\n<br/>\n  If you don&#39;t care to learn or know about database schemas<br/>\n  and such, go ahead and delete this post now, it&#39;s gonna get<br/>\n  really in depth.  I&#39;m trying to design a robust system to<br/>\n  search our knowledge base and dynamically generate our song<br/>\n  webpages.  I&#39;d also like to create an interface for those<br/>\n  of us who test regularly to update our data.<br/>\n<br/>\n  Rokenn knows that a while back I had dreams of porting all the<br/>\n  information we collected into a database.  I started work on it<br/>\n  but to make it portable I decided against using our Oracle <br/>\n  installation here.  Alternatively, I could have installed mySQL<br/>\n  and done it on that.  However for flexibility I went with file<br/>\n  based information storage.  It worked, but it sucked - needless<br/>\n  to say.  I&#39;m back in the db design phase now.  We need to address<br/>\n  the elements of the songs we want to capture and make this whole<br/>\n  thing as flexible as possible.<br/>\n<br/>\n  If you know nothing about Entity Relationship, I fear this could<br/>\n  get confusing.  Hey but if you are willing to learn, like a true<br/>\n  bard would, here ya go:  (text for design, then maybe I won&#39;t be<br/>\n  so lazy and open my visual ER and make a PDF file or something) heh.<br/>\n  People can also suggest typing these variables too, as I haven&#39;t<br/>\n  done that yet.<br/>\n<br/>\nPrimary table =========================================================<br/>\n<br/>\nHow do we support quantified data?  It varies per song.<br/>\n<br/>\nsongs<br/>\n-----<br/>\nsong_id<br/>\nsong_level<br/>\nsong_name<br/>\nsong_effect<br/>\nsong_mana<br/>\nsong_duration<br/>\nsong_casting_time<br/>\nsong_cost<br/>\nsong_skill_id [fk song_skills]<br/>\nsong_req_inst<br/>\nsong_target_id [fk song_targets]<br/>\nsong_taunt_id [fk song_taunts]<br/>\nsong_formula<br/>\nsong_analysis_by<br/>\nsong_updated_by<br/>\n<br/>\n<br/>\nLookup tables ==========================================================<br/>\n<br/>\nReally nice for controlling input with pulldowns.  Standardizes data<br/>\nas well and provides joining for complex queries.<br/>\n<br/>\n<br/>\nsong_skills  (Percussion, Wind, Singing, String, Brass)<br/>\n-----------<br/>\nskill_id<br/>\nskill_name<br/>\nskill_desc<br/>\n<br/>\n<br/>\nsong_targets (Party, Non Party, Area Effect, Target, Self, etc)<br/>\n------------<br/>\ntarget_id<br/>\ntarget_name<br/>\ntarget_desc<br/>\n<br/>\n<br/>\nguild_locations  (Freeport, Qeynos, Kelethin)<br/>\n---------------<br/>\nlocation_id<br/>\nlocation_name<br/>\nlocation_desc<br/>\n<br/>\n<br/>\nsong_taunts  (Nil, Low, Medium, High, Very High)<br/>\n-----------<br/>\ntaunt_id<br/>\ntaunt_name<br/>\ntaunt_desc<br/>\n<br/>\n<br/>\ncomment_types    (Comments, Strategy, Cautions)<br/>\n-------------<br/>\ncomment_id<br/>\ncomment_name<br/>\ncomment_desc<br/>\n<br/>\n<br/>\nData mapping tables<br/>\n=========================================================<br/>\n<br/>\n<br/>\nsong_locations  (list of songs and locations, one to many relation)<br/>\n--------------<br/>\nsong_id<br/>\nlocation_id [fk guild_locations]<br/>\n<br/>\n<br/>\nsong_unstackables  (list of songs which don&#39;t stack, one to many)<br/>\n-----------------  (this doesnt support &#39;other&#39; comments, needs work here)<br/>\nsong_id<br/>\nunstack_song_id<br/>\n<br/>\n<br/>\nsong_comments  (list of comments by type)<br/>\n-------------<br/>\nsong_id<br/>\ncomment_id [fk comment_types]<br/>\ncomment_desc<br/>\ncomment_author<br/>\n<br/>\n<br/>\n=============================================================================<br/>\n<br/>\nQueries.  [Note I am seeking input on creating this database, as such<br/>\n           no tables are out there as of yet.  These statements may <br/>\n           be off a little, but the idea is there - correct SQL or <br/>\n           not ;)  Just need to demonstrate the flexibility too. ]<br/>\n<br/>\n<br/>\no Where can I find the level &lt;foo&gt; song?<br/>\n<br/>\nselect  s.song_level,s.song_name,gl.location_name<br/>\nfrom    songs as s,<br/>\n        song_locations as sl,<br/>\n        guild_locations as gl<br/>\nwhere   s.song_id = sl.song_id<br/>\nand     sl.location_id = gl.location_id<br/>\nand     s.song_level = &lt;foo&gt;<br/>\n<br/>\n<br/>\no What is the name of level &lt;foo&gt; song?<br/>\n<br/>\nselect  song_level,song_name<br/>\nfrom    songs<br/>\nwhere   song_level = &#39;&lt;foo&gt;&#39;<br/>\n<br/>\n<br/>\no What type of type of target does Denon&#39;s Desparate Dirge use?<br/>\n<br/>\nselect  s.song_name,st.target_name<br/>\nfrom    songs as s,<br/>\n        song_targets as st<br/>\nwhere   s.song_target_id = st.target_id<br/>\nand     s.song_name = &#39;Denon&#39;&#39;s Desparate Dirge&#39;<br/>\n<br/>\n<br/>\no What strategies are there for L50 Verses of Victory?<br/>\n<br/>\nselect  s.song_name,sc.comment_author,sc.comment_desc<br/>\nfrom    songs as s,<br/>\n        song_comments as sc,<br/>\n        comment_types as ct<br/>\nwhere   s.song_id = sc.song_id<br/>\nand     sc.comment_id = ct.comment_id<br/>\nand     ct.comment_name = &#39;Strategy&#39;<br/>\nand     s.song_level = &#39;50&#39;<br/>\n<br/>\n<br/>\netc, etc, etc.<br/>\n<br/>\n  Anyone care to comment?  Additional values we should be storing?<br/>\n  Different model?  Better implementation?  Maybe take this to a<br/>\n  different area to talk about it, if a lot of people have ideas.<br/>\n<br/>\n  Harmonic.<br/>\n<br/>\n  +=================================+<br/>\n  | Ryan Honeyman, Programmer      /<br/>\n  | Decipher, Web Group           /<br/>\n  | <a rel=\"nofollow\" target=\"_blank\" href=\"http://www.decipher.com\">http://www.decipher.com</a>      /<br/>\n  +-----------------------------+<br/>\n  | phone&gt; 757.664.1126        /<br/>\n  | pager&gt; 757.629.1567       /<br/>\n  +==========================+</div>","specialLinks":[]}}
